package decoder

import (
	"bytes"
	"testing"

	"github.com/yunomu/jpeg/jpeg"
)

func TestDecodeHufftable(t *testing.T) {
	bits := []byte{0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0}
	vals := []byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}
	d := New(bytes.NewReader(append(
		[]byte{0x12}, // Tc, Th
		append(bits, vals...)...,
	)))

	hufftable, l, err := d.readHTn()
	if err != nil {
		t.Fatalf("decode hufftable: %v", err)
	}

	if l != 29 {
		t.Errorf("l=%d", l)
	}

	if hufftable.class != 1 {
		t.Errorf("Tc=%v", hufftable.class)
	}
	if hufftable.target != 2 {
		t.Errorf("Th=%v", hufftable.target)
	}

	expcodes := []uint16{
		0b00000000000000_00,
		0b0000000000000_010,
		0b0000000000000_011,
		0b0000000000000_100,
		0b0000000000000_101,
		0b0000000000000_110,
		0b000000000000_1110,
		0b00000000000_11110,
		0b0000000000_111110,
		0b000000000_1111110,
		0b00000000_11111110,
		0b0000000_111111110,
	}
	for i, code := range hufftable.huffcodes {
		if code.value != vals[i] {
			t.Errorf("code[%d]=%d vals[%d]=%d", i, code.value, i, vals[i])
		}

		if code.code != expcodes[i] {
			t.Errorf("code[%d]=0b%016b expcodes[%d]=0b%016b", i, code.code, i, expcodes[i])
		}
	}
}

var (
	inbs = []byte{
		0xFF, 0xC0, // SOF0
		0x0, 0x11, // Lf
		0x8, 0x1, 0x90, 0x1, 0x90, 0x3, 0x1, 0x22, 0x0, 0x2, 0x11, 0x1, 0x3, 0x11, 0x1, // SOF0
		0x0, 0x84, // Lq
		0x0, 0x8, 0x6, 0x6, 0x7, 0x6, 0x5, 0x8, 0x7, 0x7, 0x7, 0x9, 0x9, 0x8, 0xA, 0xC, 0x14, 0xD, 0xC, 0xB, 0xB, 0xC, 0x19, 0x12, 0x13, 0xF, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32, 0x1, 0x9, 0x9, 0x9, 0xC, 0xB, 0xC, 0x18, 0xD, 0xD, 0x18, 0x32, 0x21, 0x1C, 0x21, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, // DQT
		0x1, 0xA2, // Lh
		0x0, 0x0, 0x1, 0x5, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0x10, 0x0, 0x2, 0x1, 0x3, 0x3, 0x2, 0x4, 0x3, 0x5, 0x5, 0x4, 0x4, 0x0, 0x0, 0x1, 0x7D, 0x1, 0x2, 0x3, 0x0, 0x4, 0x11, 0x5, 0x12, 0x21, 0x31, 0x41, 0x6, 0x13, 0x51, 0x61, 0x7, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x8, 0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x9, 0xA, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0x1, 0x0, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0x11, 0x0, 0x2, 0x1, 0x2, 0x4, 0x4, 0x3, 0x4, 0x7, 0x5, 0x4, 0x4, 0x0, 0x1, 0x2, 0x77, 0x0, 0x1, 0x2, 0x3, 0x11, 0x4, 0x5, 0x21, 0x31, 0x6, 0x12, 0x41, 0x51, 0x7, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x8, 0x14, 0x42, 0x91, 0xA1, 0xB1, 0xC1, 0x9, 0x23, 0x33, 0x52, 0xF0, 0x15, 0x62, 0x72, 0xD1, 0xA, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, // DHT
		0x0, 0x0c, // Ls
		0x3, 0x1, 0x0, 0x2, 0x11, 0x3, 0x11, 0x0, 0x3F, 0x0, // SOS
		0xEA, 0x77, 0x8D, 0xD5, // block
	}
)

func TestReadDHT(t *testing.T) {
	d := New(bytes.NewReader(inbs))

	fHeader, err := d.readFrameHeader()
	if err != nil {
		t.Fatalf("readFrameHeader: %v", err)
	}
	t.Logf("frameHeader: %v", fHeader)

	qts, err := d.readDQT()
	if err != nil {
		t.Fatalf("readDQT: %v", err)
	}
	t.Logf("qt[0]=%v", qts[0])

	hts, err := d.readDHT()
	if err != nil {
		t.Fatalf("readDHT: %v", err)
	}
	t.Logf("tables[0]=%v", hts[0])

	scanHeader, err := d.decodeScanHeader()
	if err != nil {
		t.Fatalf("decodeScanHeader: %v", err)
	}
	t.Logf("scanHeader=%v", scanHeader)

	unit, err := d.decodeDataUnit(&componentParam{
		qt:   qts[0],
		dcHT: hts[0],
		acHT: hts[1],
	}, 8)
	if err != nil {
		t.Fatalf("decodeDataUnit")
	}
	t.Logf("unit=%v", unit)

	d0 := jpeg.NewDecoder(bytes.NewReader(inbs[2:]))
	if err := d0.Process(); err != nil {
		t.Fatalf("process: %v", err)
	}

	for _, ht := range hts {
		maxCodes := d0.GetMaxCodes(int(ht.class), int(ht.target))
		t.Logf("maxCodes=%v", maxCodes)
		t.Logf("ht.maxcode=%v", ht.maxcode)
	}
}
